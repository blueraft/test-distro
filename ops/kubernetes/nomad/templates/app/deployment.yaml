{{- if .Values.nomad.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nomad.fullname" . }}-app
  labels:
    {{- include "nomad.labels" . | nindent 4 }}
    app.kubernetes.io/component: app
spec:
  replicas: {{ .Values.nomad.app.replicaCount }}
  selector:
    matchLabels:
      {{- include "nomad.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: app
  template:
    metadata:
      {{- with .Values.nomad.worker.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
        {{- if .Values.roll }}
        rollme: {{ randAlphaNum 5 | quote }}
        {{- end }}
      {{- else }}
      {{- if .Values.roll }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      {{- end }}
      {{- end }}
      labels:
        {{- include "nomad.labels" . | nindent 8 }}
	      {{- with .Values.nomad.app.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        app.kubernetes.io/component: app
    spec:
      {{- with .Values.nomad.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nomad.serviceAccountName" . }}
      {{- with .Values.nomad.app.podSecurityContext }}
      securityContext:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-app
          {{- with .Values.nomad.app.securityContext }}
          securityContext:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ .Values.nomad.image.repository }}:{{ .Values.nomad.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.nomad.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.nomad.app.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: "{{ .Values.nomad.proxy.path }}/alive"
              port: 8000
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: {{ add .Values.nomad.proxy.timeout 10}}
          readinessProbe:
            httpGet:
              path: "{{ .Values.nomad.proxy.path }}/alive"
              port: 8000
            initialDelaySeconds: 90
            periodSeconds: 3
            timeoutSeconds: {{ add .Values.nomad.proxy.timeout 3 }}
          {{- with .Values.nomad.app.resources }}
          resources:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /app/nomad.yaml
              name: nomad-conf
              subPath: nomad.yaml
            - mountPath: /app/uvicorn.log.conf
              name: uvicorn-log-conf
              subPath: uvicorn.log.conf
            - mountPath: /app/.volumes/fs/public
              name: public-volume
            - mountPath: /app/.volumes/fs/staging
              name: staging-volume
            - mountPath: /app/.volumes/fs/north/users
              name: north-home-volume
            - mountPath: /nomad
              name: nomad-volume
            {{- with .Values.nomad.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          env:
            - name: NOMAD_META_SERVICE
              value: "app"
            - name: NOMAD_CONSOLE_LOGLEVEL
              value: "{{ .Values.nomad.config.app.console_loglevel }}"
            - name: NOMAD_LOGSTASH_LEVEL
              value: "{{ .Values.nomad.config.app.logstash_loglevel }}"
            {{- if .Values.nomad.config.api.apiSecret }}
            - name: NOMAD_SERVICES_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.nomad.config.api.apiSecret }}
                  key: password
            {{- end }}
            {{- if .Values.nomad.config.keycloak.clientSecret }}
            - name: NOMAD_KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.nomad.config.keycloak.clientSecret }}
                  key: password
            {{- end }}
            {{- if .Values.nomad.config.client.passwordSecret }}
            - name: NOMAD_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.nomad.config.client.passwordSecret }}
                  key: password
            {{- end }}
            {{- if .Values.nomad.config.keycloak.passwordSecret }}
            - name: NOMAD_KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.nomad.config.keycloak.passwordSecret }}
                  key: password
            {{- end }}
            {{- if and .Values.nomad.config.datacite.enabled .Values.nomad.config.datacite.secret }}
            - name: NOMAD_DATACITE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.nomad.config.datacite.secret }}
                  key: password
            - name: NOMAD_DATACITE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.nomad.config.datacite.secret }}
                  key: user
            {{- end }}
            {{- if and .Values.nomad.config.north.enabled .Values.nomad.config.north.hubServiceApiTokenSecret }}
            - name: NOMAD_NORTH_HUB_SERVICE_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.nomad.config.north.hubServiceApiTokenSecret }}
                  key: token
            {{- end }}
          command: ["python", "-m", "nomad.cli", "admin", "run", "app", "--log-config", "uvicorn.log.conf", "--with-gui", "--host", "0.0.0.0"]
      volumes:
        {{- with .Values.nomad.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: uvicorn-log-conf
          configMap:
            name: {{ include "nomad.fullname" . }}-configmap-app-uvicorn-log-config
        - name: app-run-script
          configMap:
            name: {{ include "nomad.fullname" . }}-app-run-script
        - name: nomad-conf
          configMap:
            name: {{ include "nomad.fullname" . }}-configmap
        - name: public-volume
          hostPath:
            path: {{ .Values.nomad.config.volumes.public }}
            # type: Directory
        - name: staging-volume
          {{ if (eq .Values.nomad.config.worker.storage "memory") }}
          emptyDir:
            medium: 'Memory'
          {{ else }}
          hostPath:
            path: {{ .Values.nomad.config.volumes.staging}}
            # type: Directory
          {{ end }}
        - name: north-home-volume
          hostPath:
            path: {{ .Values.nomad.config.volumes.north_home}}
            # type: Directory
        - name: nomad-volume
          hostPath:
            path: {{ .Values.nomad.config.volumes.nomad }}
            # type: Directory
      {{- with .Values.nomad.app.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nomad.app.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nomad.app.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end}}