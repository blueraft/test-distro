# default installed image for docker executor is: python:3.9
# using an image that can do git, docker, docker-compose
image: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair/ci-runner:latest

# build directory inside
# https://gitlab.mpcdf.mpg.de/help/ci/runners/configure_runners.md#custom-build-directories

# https://docs.gitlab.com/ee/ci/yaml/workflow.html
# https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# if: CI_COMMIT_BRANCH && CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"
# A branch pipeline, but it is the first commit for that branch
# if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
# For an existing workflow section to switch from branch pipelines to merge request pipelines when a merge request is created.
# if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
# A branch pipeline, but a merge request is open for that branch, do not run the branch pipeline.
# if: $CI_PIPELINE_SOURCE == "merge_request_event"
# A merge request pipeline, start the pipeline.
# if: $CI_COMMIT_BRANCH
# A branch pipeline, but there is no merge request open for the branch, run the branch pipeline.

default:
  tags:
    # Necessary to select the right CI runner
    - cloud

variables:
  DOCKER_TAG: ${CI_COMMIT_REF_SLUG}

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
      variables:
        DOCKER_TAG: ${CI_COMMIT_REF_NAME}
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: never

stages:
  - update_deps
  - build
  - test
  - deploy
  - release

update dependencies:
  stage: update_deps
  image: python:3.9
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SUBMODULE_DEPTH: 1
    GIT_SUBMODULE_UPDATE_FLAGS: --jobs 4
    DOCKER_BUILDKIT: 1
  before_script:
    - pip install --upgrade uv
    - git config user.name "CI Pipeline"
    - git config user.email "cipipeline@nomad-lab.eu"
    - git remote add gitlab_origin https://oauth2:$CI_ACCESS_TOKEN@gitlab.mpcdf.mpg.de/nomad-lab/nomad-distro.git &> /dev/null
  script:
    - scripts/generate_python_dependencies.sh
    - git add requirements*
    - |
      if [[ `git status --porcelain` ]]; then
        git commit -m "update requirements in CI" && git push gitlab_origin HEAD:main -o ci.skip # prevent triggering pipeline again
      fi
  after_script:
    - git remote rm gitlab_origin &> /dev/null
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
      allow_failure: false
    - if: $CI_COMMIT_BRANCH == "develop" && $DEVELOP_NIGHTLY
      when: always
      allow_failure: false
    - when: manual
      allow_failure: true

build image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SUBMODULE_DEPTH: 1
    GIT_SUBMODULE_UPDATE_FLAGS: --jobs 4
    DOCKER_BUILDKIT: 1
  before_script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$CI_DEPENDENCY_PROXY_SERVER\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "."
      --dockerfile "Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${DOCKER_TAG}"
      --cache-repo "${CI_REGISTRY_IMAGE}/cache"
      --cache=true

build helm chart:
  stage: build
  script:
    - helm package -u ops/kubernetes/nomad -d ops/kubernetes
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@ops/kubernetes/nomad-1.1.0.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/latest/charts"'
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - when: manual
      allow_failure: true

build python package:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SUBMODULE_DEPTH: 1
    GIT_SUBMODULE_UPDATE_FLAGS: --jobs 4
  script:
    - python -m pip install build
    - python -m build
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  rules:
    - when: on_success

check helm chart:
  stage: test
  image: ${CI_REGISTRY_IMAGE}:${DOCKER_TAG}
  script:
    - scripts/check_helm_chart.sh
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'failed' ]; then
        echo 'Make sure that the helm chart values.yaml has been updated and committed by running'
        echo './scripts/update_hem_chart.sh'
      fi
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success

install tests:
  stage: test
  image: python:3.9
  variables:
    UV_SYSTEM_PYTHON: true
  script:
    - pip install uv
    - uv pip install dist/nomad_*.tar.gz
    - python -c 'import nomad.cli'
    - python -c 'from nomad.client import ArchiveQuery'
    - uv pip install git+https://github.com/nomad-coe/nomad-parser-example.git
    - python -m exampleparser tests/data/examples/example.out

check python dependencies:
  stage: test
  image: python:3.9
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SUBMODULE_UPDATE_FLAGS: --jobs 4
  before_script:
    - pip install uv
  script:
    - scripts/check_python_dependencies.sh

.tag image:
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo ${TARGET_ENV}
    - crane cp ${CI_REGISTRY_IMAGE}:${DOCKER_TAG} ${CI_REGISTRY_IMAGE}:${TARGET_ENV}

.deploy image: &deploy_image
  stage: deploy
  image: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair/ci-runner:latest
  before_script:
    - mkdir ~/.kube/
    - echo ${CI_K8S_CLOUD_CONFIG} | base64 -d > ~/.kube/config
  script:
    - echo ${TARGET_ENV}
    - helm dependency update ops/kubernetes/nomad
    - helm upgrade nomad-prod-${TARGET_ENV} ops/kubernetes/nomad
      --install
      --namespace nomad-prod-${TARGET_ENV}
      --values ops/kubernetes/values.yaml
      --values plugins-values.yaml
      --values ops/kubernetes/nomad-prod-${TARGET_ENV}.yaml
      --set nomad.image.tag=${TARGET_ENV}
      --set roll=true
      --timeout=15m
      --wait

.test deployment: &test_deployment
  stage: deploy
  image:
    name: ${CI_REGISTRY_IMAGE}:${DOCKER_TAG}
    entrypoint: [""]
  script:
    - CLIENT_URL="https://nomad-lab.eu/prod/v1/${TARGET_ENV}/api"
    - echo ${CLIENT_URL}
    - nomad client -n $CLIENT_URL -u test -w $CI_NOMAD_TEST_PASSWORD integrationtests --skip-publish --skip-doi

deploy distro:
  stage: deploy
  extends:
    - .tag image
  variables:
    TARGET_ENV: distro
  before_script:
    - echo "TARGET_ENV=distro" >> build.env
    - echo "name=distro" >> build.env
    - echo "deployment_tier=production" >> build.env
    - echo "url=https://nomad-lab.eu/prod/v1/distro" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - when: manual
      allow_failure: true

deploy distro image:
  stage: deploy
  needs: ["deploy distro"]
  <<: *deploy_image

test distro deployment:
  stage: deploy
  needs: ["deploy distro", "deploy distro image"]
  <<: *test_deployment

deploy test:
  stage: deploy
  extends:
    - .tag image
  variables:
    TARGET_ENV: test
  before_script:
    - echo "TARGET_ENV=test" >> build.env
    - echo "name=test" >> build.env
    - echo "deployment_tier=production" >> build.env
    - echo "url=https://nomad-lab.eu/prod/v1/test" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - when: manual
      allow_failure: true

deploy test image:
  stage: deploy
  needs: ["deploy test"]
  <<: *deploy_image

test test deployment:
  stage: deploy
  needs: ["deploy test", "deploy test image"]
  <<: *test_deployment

deploy staging:
  stage: deploy
  extends:
    - .tag image
  variables:
    TARGET_ENV: staging
  before_script:
    - echo "TARGET_ENV=staging" >> build.env
    - echo "name=staging" >> build.env
    - echo "deployment_tier=production" >> build.env
    - echo "url=https://nomad-lab.eu/prod/v1/staging" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - when: manual
      allow_failure: true

deploy staging image:
  stage: deploy
  needs: ["deploy staging"]
  <<: *deploy_image

test staging deployment:
  stage: deploy
  needs: ["deploy staging", "deploy staging image"]
  <<: *test_deployment

deploy develop:
  stage: deploy
  extends:
    - .tag image
  variables:
    TARGET_ENV: develop
  before_script:
    - echo "TARGET_ENV=develop" >> build.env
    - echo "name=develop" >> build.env
    - echo "deployment_tier=production" >> build.env
    - echo "url=https://nomad-lab.eu/prod/v1/develop" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $DEVELOP_NIGHTLY
      when: on_success
    - when: manual
      allow_failure: true

deploy develop image:
  stage: deploy
  needs: ["deploy develop"]
  <<: *deploy_image

test develop deployment:
  stage: deploy
  needs: ["deploy develop", "deploy develop image"]
  <<: *test_deployment

release latest image:
  stage: release
  extends: .tag image
  variables:
    TARGET_ENV: latest
  rules:
    - when: manual
      allow_failure: true

release stable image:
  stage: release
  extends: .tag image
  variables:
    TARGET_ENV: stable
  rules:
    - when: manual
      allow_failure: true

release python package:
  stage: release
  script:
    - python -m pip install twine
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
    - when: manual
      allow_failure: true
